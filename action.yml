name: Dedicated Launch Test
description: Test if specified mods can launch on dedicated server environment
inputs:
  extra:
    description: Path to extra mods json
    required: false
    default: ""
  extra1:
    description: Another path to extra mods json, in case you need a new one
    required: false
    default: ""
  mod:
    description: Path to the mod file
    required: true
runs:
  using: composite
  steps:
    - name: Setup
      shell: bash
      run: |
        mkdir -p dedicated-launch-test/extra
        mkdir -p dedicated-launch-test/extra1
        mkdir -p dedicated-launch-test/server
    - name: Apply extra mods cache
      uses: actions/cache@v2
      with:
        path: dedicated-launch-test/extra
        key: ${{ runner.os }}-extra-${{ hashFiles(inputs.extra) }}
        #restore-keys: ${{ runner.os }}-extra-
    - name: Apply extra-1 mods cache
      uses: actions/cache@v2
      with:
        path: dedicated-launch-test/extra1
        key: ${{ runner.os }}-extra1-${{ hashFiles(inputs.extra1) }}
    - name: Apply server cache
      uses: actions/cache@v2
      with:
        path: dedicated-launch-test/server
        key: ${{ runner.os }}-server-${{ hashFiles('dedicated-launch-test/server/libraries/**') }}
        restore-keys: ${{ runner.os }}-server-
    - name: Download extra mods
      shell: bash
      env:
        EXTRA_MODS: ${{ inputs.extra }}
      run: |
        cd dedicated-launch-test/extra
        EXTRA_MODS="../../$EXTRA_MODS"
        if [ -f "$EXTRA_MODS" ]; then
          for e in `jq -c '.[]' $EXTRA_MODS`; do
            echo "$e" > tmp.json
            name=`jq -r '.name' tmp.json`
            url=`jq -r '.file' tmp.json`
            if [ ! -f "$name" ]; then
              echo "Downloading $name from $url"
              wget -q -O "$name" "$url"
            else
              echo "Skipping $name, already downloaded"
            fi
            rm tmp.json
          done
        fi
    - name: Download extra1 mods
      shell: bash
      env:
        EXTRA1_MODS: ${{ inputs.extra1 }}
      run: |
        cd dedicated-launch-test/extra1
        EXTRA1_MODS="../../$EXTRA1_MODS"
        if [ -f "$EXTRA1_MODS" ]; then
          cat $EXTRA1_MODS
          for e in `jq -c '.[]' $EXTRA1_MODS`; do
            echo "$e" > tmp.json
            name=`jq -r '.name' tmp.json`
            url=`jq -r '.file' tmp.json`
            if [ ! -f "$name" ]; then
              echo "Downloading $name from $url"
              wget -q -O "$name" "$url"
            else
              echo "Skipping $name, already downloaded"
            fi
            rm tmp.json
          done
        fi
    - name: Setup Server
      shell: bash
      run: |
        cd dedicated-launch-test/server
        if [ ! -f arclight.jar ]; then
          echo "Installing Arclight"
          curl -sLH 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN}}' -o Arclight.zip https://api.github.com/repos/IzzelAliz/Arclight/actions/artifacts/661021621/zip
          unzip Arclight.zip
          java -jar arclight-forge-1.19.4-1.0.4-SNAPSHOT.jar nogui > /dev/null 2>&1
          echo -n "eula=true" > eula.txt
        fi
        mkdir mods || true
    - name: Copy mods
      shell: bash
      env:
        MOD: ${{ inputs.mod }}
      run: |
        cp -v dedicated-launch-test/extra/* dedicated-launch-test/server/mods/ || true
        cp -v dedicated-launch-test/extra1/* dedicated-launch-test/server/mods/ || true
        cp -v $MOD dedicated-launch-test/server/mods/
    - name: Launch
      shell: bash
      run: |
        cd dedicated-launch-test/server
        java -jar -Djava.awt.headless=true arclight-forge-1.19.4-1.0.4-SNAPSHOT.jar nogui <<< "stop"
    - name: Check
      shell: bash
      run: |
        cd dedicated-launch-test/server
        cat crash-reports/* || true
        grep 'For help, type "help"' logs/*
    - name: Cleanup
      shell: bash
      run: |
        cd dedicated-launch-test/server
        rm -vf mods/*
        rm -rf crash-reports
        rm -rf logs
        rm -rf world
